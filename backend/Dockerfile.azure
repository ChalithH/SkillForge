# Azure-optimised Dockerfile for .NET 8 Backend
# Optimised for minimal resource usage and faster cold starts

# Stage 1: Build environment (using smaller SDK image)
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
WORKDIR /src

# Copy csproj and restore (better layer caching)
COPY *.csproj ./
RUN dotnet restore --runtime linux-musl-x64

# Copy source code
COPY . .

# Build with ahead-of-time compilation for faster startup
RUN dotnet build -c Release --runtime linux-musl-x64 --no-restore -o /app/build

# Stage 2: Publish (optimised for size)
FROM build AS publish
RUN dotnet publish -c Release \
    --runtime linux-musl-x64 \
    --self-contained false \
    --no-restore \
    --output /app/publish \
    /p:PublishTrimmed=false \
    /p:PublishSingleFile=false

# Stage 3: Runtime (minimal Alpine image for cost optimization)
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS runtime
WORKDIR /app

# Install curl for health checks (minimal overhead)
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S skillforge && \
    adduser -S skillforge -G skillforge

# Create necessary directories
RUN mkdir -p /app/uploads && \
    chown -R skillforge:skillforge /app

# Copy published application
COPY --from=publish /app/publish .
RUN chown -R skillforge:skillforge /app

# Switch to non-root user
USER skillforge

# Expose port
EXPOSE 5000

# Optimised environment for Azure Container Apps
ENV ASPNETCORE_ENVIRONMENT=Production \
    ASPNETCORE_URLS=http://+:5000 \
    DOTNET_USE_POLLING_FILE_WATCHER=false \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true

# Lightweight health check (reduced frequency for cost)
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=2 \
  CMD curl -f http://localhost:5000/health || exit 1

# Entry point
ENTRYPOINT ["dotnet", "SkillForge.Api.dll"]